program SistemInformasiRumahSakit

kamus
    type Pasien : <
        id : string,
        nama : string,
        umur : integer,
        gender : string
    >

    type Dokter : <
        id : string,
        nama : string,
        spesialisasi : string,
        gender : string,
        jadwal : string
    >

    type Riwayat : <
        id : string,
        pasienID : string,
        dokterID : string,
        tanggal : string,
        diagnosa : string
    >

    daftarPasien : array of Pasien
    daftarDokter : array of Dokter
    daftarRiwayat : array of Riwayat
    pilihan : integer
    id_cari : string

algoritma
    // Inisialisasi data contoh
    daftarPasien <- [
        {"P001", "Assyifa Dwi Safitri", 35, "P"},
        {"P002", "Amirah Essary Yunsarah Sujuthi", 28, "P"},
        {"P003", "Keisha Hananta", 45, "P"},
        {"P004", "Dit Adit", 20, "L"}
    ]

    daftarDokter <- [
        {"D001", "Dr. Ahmad", "Kardiologi", "L", "Senin-Jumat, 08.00-12.00"},
        {"D002", "Dr. Budi", "Kedokteran Umum", "L", "Senin-Jumat, 13.00-17.00"},
        {"D003", "Dr. Candra", "Kedokteran Gigi", "L", "Senin-Jumat, 08.00-12.00"},
        {"D004", "Dr. Dwi", "Kedokteran Gigi", "P", "Senin-Jumat, 13.00-17.00"},
        {"D005", "Dr. Eka", "Kedokteran Mata", "P", "Senin-Jumat, 08.00-12.00"}
    ]

    daftarRiwayat <- [
        {"R001", "P001", "D001", "2023-07-01", "Cephalgia"},
        {"R002", "P002", "D002", "2023-07-02", "Nausea"},
        {"R003", "P003", "D003", "2023-07-03", "Odontalgia"},
        {"R004", "P004", "D004", "2023-07-04", "Karies Gigi"},
        {"R005", "P005", "D005", "2023-07-05", "Miopia"}
    ]

    // Menu utama
    loop
        output("\n=== SISTEM INFORMASI RUMAH SAKIT ===")
        output("1. Kelola Data Pasien")
        output("2. Kelola Data Dokter")
        output("3. Kelola Data Riwayat")
        output("4. Keluar")
        output("Pilih menu (1-4): ")
        input(pilihan)

        switch pilihan
            case 1:
                menuPasien()
            case 2:
                menuDokter()
            case 3:
                menuRiwayat()
            case 4:
                output("Terima kasih telah menggunakan sistem ini.")
                exit program
            default:
                output("Pilihan tidak valid! Silakan pilih 1-4.")
        endswitch
    endloop

fungsi menuPasien()
kamus
    pilihan_pasien : integer
    id_pasien_cari : string
algoritma
    loop
        output("\n=== MENU PASIEN ===")
        output("1. Tampilkan Semua Pasien")
        output("2. Tambah Pasien Baru")
        output("3. Edit Data Pasien")
        output("4. Hapus Data Pasien")
        output("5. Urutkan Pasien Berdasarkan Umur")
        output("6. Urutkan Pasien Berdasarkan Nama")
        output("7. Cari Pasien Berdasarkan ID")
        output("8. Kembali ke Menu Utama")
        output("Pilih menu (1-8): ")
        input(pilihan_pasien)

        switch pilihan_pasien
            case 1:
                tampilkanPasien()
            case 2:
                tambahPasien()
            case 3:
                editPasien()
            case 4:
                hapusPasien()
            case 5:
                urutkanPasienByUmur()
                tampilkanPasien()
            case 6:
                urutkanPasienByNama()
                tampilkanPasien()
            case 7:
                output("Masukkan ID Pasien: ")
                input(id_pasien_cari)
                cariPasienById(id_pasien_cari)
            case 8:
                return
            default:
                output("Pilihan tidak valid! Silakan pilih 1-8.")
        endswitch
    endloop

fungsi tampilkanPasien()
algoritma
    output("\nDaftar Pasien:")
    output("==========================================")
    output("ID    Nama                      Umur Gender")
    output("==========================================")
    for each pasien in daftarPasien
        output(pasien.id, pasien.nama, pasien.umur, pasien.gender)
    endfor

fungsi tambahPasien()
kamus
    pasien_baru : Pasien
algoritma
    output("\nTambah Pasien Baru")
    output("ID Pasien: ")
    input(pasien_baru.id)
    output("Nama Pasien: ")
    input(pasien_baru.nama)
    output("Umur Pasien: ")
    input(pasien_baru.umur)
    output("Gender (L/P): ")
    input(pasien_baru.gender)

    append pasien_baru to daftarPasien
    output("Pasien berhasil ditambahkan!")

fungsi editPasien()
kamus
    id_edit : string
    ditemukan : boolean
algoritma
    output("Masukkan ID Pasien yang akan diedit: ")
    input(id_edit)

    ditemukan <- false
    for i from 0 to length(daftarPasien) - 1
        if daftarPasien[i].id = id_edit then
            output("\nData Pasien Ditemukan:")
            output("ID    Nama                      Umur Gender")
            output(daftarPasien[i].id, daftarPasien[i].nama, daftarPasien[i].umur, daftarPasien[i].gender)

            output("\nMasukkan data baru:")
            output("Nama Pasien: ")
            input(daftarPasien[i].nama)
            output("Umur Pasien: ")
            input(daftarPasien[i].umur)
            output("Gender (L/P): ")
            input(daftarPasien[i].gender)

            output("Data pasien berhasil diperbarui!")
            ditemukan <- true
            break
        endif
    endfor
    if not ditemukan then
        output("Pasien dengan ID ", id_edit, " tidak ditemukan.")
    endif

fungsi hapusPasien()
kamus
    id_hapus : string
    idx_pasien : integer
    ditemukan : boolean
algoritma
    output("Masukkan ID Pasien yang akan dihapus: ")
    input(id_hapus)

    idx_pasien <- -1
    for i from 0 to length(daftarPasien) - 1
        if daftarPasien[i].id = id_hapus then
            idx_pasien <- i
            ditemukan <- true
            break
        endif
    endfor

    if ditemukan then
        // Hapus riwayat yang terkait dengan pasien ini
        i <- 0
        while i < length(daftarRiwayat)
            if daftarRiwayat[i].pasienID = id_hapus then
                remove daftarRiwayat[i]
            else
                i <- i + 1
            endif
        endwhile

        // Hapus pasien
        remove daftarPasien[idx_pasien]
        output("Pasien dan riwayat terkait berhasil dihapus!")
    else
        output("Pasien dengan ID ", id_hapus, " tidak ditemukan.")
    endif

fungsi urutkanPasienByUmur()
algoritma
    // Selection Sort
    for i from 0 to length(daftarPasien) - 2
        minIndex <- i
        for j from i + 1 to length(daftarPasien) - 1
            if daftarPasien[j].umur < daftarPasien[minIndex].umur then
                minIndex <- j
            endif
        endfor
        if minIndex != i then
            swap daftarPasien[i] and daftarPasien[minIndex]
        endif
    endfor

fungsi urutkanPasienByNama()
algoritma
    // Insertion Sort
    for i from 1 to length(daftarPasien) - 1
        key <- daftarPasien[i]
        j <- i - 1
        while j >= 0 and daftarPasien[j].nama > key.nama do
            daftarPasien[j+1] <- daftarPasien[j]
            j <- j - 1
        endwhile
        daftarPasien[j+1] <- key
    endfor

fungsi cariPasienById(id : string)
kamus
    found : boolean
algoritma
    found <- false
    for each pasien in daftarPasien
        if pasien.id = id then
            output("\nData Pasien Ditemukan:")
            output("==========================================")
            output("ID    Nama                      Umur Gender")
            output("==========================================")
            output(pasien.id, pasien.nama, pasien.umur, pasien.gender)
            found <- true
            break
        endif
    endfor
    if not found then
        output("Pasien dengan ID ", id, " tidak ditemukan.")
    endif

---

fungsi menuDokter()
kamus
    pilihan_dokter : integer
    id_dokter_cari : string
algoritma
    loop
        output("\n=== MENU DOKTER ===")
        output("1. Tampilkan Semua Dokter")
        output("2. Tambah Dokter Baru")
        output("3. Edit Data Dokter")
        output("4. Hapus Data Dokter")
        output("5. Urutkan Dokter Berdasarkan Nama")
        output("6. Cari Dokter Berdasarkan ID (Binary Search)")
        output("7. Kembali ke Menu Utama")
        output("Pilih menu (1-7): ")
        input(pilihan_dokter)

        switch pilihan_dokter
            case 1:
                tampilkanDokter()
            case 2:
                tambahDokter()
            case 3:
                editDokter()
            case 4:
                hapusDokter()
            case 5:
                urutkanDokterByNama()
                tampilkanDokter()
            case 6:
                output("Masukkan ID Dokter: ")
                input(id_dokter_cari)
                cariDokterByIdBinary(id_dokter_cari)
            case 7:
                return
            default:
                output("Pilihan tidak valid! Silakan pilih 1-7.")
        endswitch
    endloop

fungsi tampilkanDokter()
algoritma
    output("\nDaftar Dokter:")
    output("=============================================================")
    output("ID    Nama                Spesialisasi    Gender     Jadwal")
    output("=============================================================")
    for each dokter in daftarDokter
        output(dokter.id, dokter.nama, dokter.spesialisasi, dokter.gender, dokter.jadwal)
    endfor

fungsi tambahDokter()
kamus
    dokter_baru : Dokter
algoritma
    output("\nTambah Dokter Baru")
    output("ID Dokter: ")
    input(dokter_baru.id)
    output("Nama Dokter: ")
    input(dokter_baru.nama)
    output("Spesialisasi: ")
    input(dokter_baru.spesialisasi)
    output("Gender (L/P): ")
    input(dokter_baru.gender)
    output("Jadwal Praktek: ")
    input(dokter_baru.jadwal)

    append dokter_baru to daftarDokter
    output("Dokter berhasil ditambahkan!")

fungsi editDokter()
kamus
    id_edit : string
    ditemukan : boolean
algoritma
    output("Masukkan ID Dokter yang akan diedit: ")
    input(id_edit)

    ditemukan <- false
    for i from 0 to length(daftarDokter) - 1
        if daftarDokter[i].id = id_edit then
            output("\nData Dokter Ditemukan:")
            output("ID    Nama                Spesialisasi    Gender     Jadwal")
            output(daftarDokter[i].id, daftarDokter[i].nama, daftarDokter[i].spesialisasi, daftarDokter[i].gender, daftarDokter[i].jadwal)

            output("\nMasukkan data baru:")
            output("Nama Dokter: ")
            input(daftarDokter[i].nama)
            output("Spesialisasi: ")
            input(daftarDokter[i].spesialisasi)
            output("Gender (L/P): ")
            input(daftarDokter[i].gender)
            output("Jadwal Praktek: ")
            input(daftarDokter[i].jadwal)

            output("Data dokter berhasil diperbarui!")
            ditemukan <- true
            break
        endif
    endfor
    if not ditemukan then
        output("Dokter dengan ID ", id_edit, " tidak ditemukan.")
    endif

fungsi hapusDokter()
kamus
    id_hapus : string
    idx_dokter : integer
    ditemukan : boolean
algoritma
    output("Masukkan ID Dokter yang akan dihapus: ")
    input(id_hapus)

    idx_dokter <- -1
    for i from 0 to length(daftarDokter) - 1
        if daftarDokter[i].id = id_hapus then
            idx_dokter <- i
            ditemukan <- true
            break
        endif
    endfor

    if ditemukan then
        // Hapus riwayat yang terkait dengan dokter ini
        i <- 0
        while i < length(daftarRiwayat)
            if daftarRiwayat[i].dokterID = id_hapus then
                remove daftarRiwayat[i]
            else
                i <- i + 1
            endif
        endwhile

        // Hapus dokter
        remove daftarDokter[idx_dokter]
        output("Dokter dan riwayat terkait berhasil dihapus!")
    else
        output("Dokter dengan ID ", id_hapus, " tidak ditemukan.")
    endif

fungsi urutkanDokterByNama()
algoritma
    // Selection Sort
    for i from 0 to length(daftarDokter) - 2
        minIndex <- i
        for j from i + 1 to length(daftarDokter) - 1
            if daftarDokter[j].nama < daftarDokter[minIndex].nama then
                minIndex <- j
            endif
        endfor
        if minIndex != i then
            swap daftarDokter[i] and daftarDokter[minIndex]
        endif
    endfor

fungsi cariDokterByIdBinary(id : string)
kamus
    low, high, mid : integer
    found : boolean
algoritma
    // Urutkan dokter berdasarkan ID terlebih dahulu (menggunakan Bubble Sort)
    n <- length(daftarDokter)
    for i from 0 to n - 2
        for j from 0 to n - i - 2
            if daftarDokter[j].id > daftarDokter[j+1].id then
                swap daftarDokter[j] and daftarDokter[j+1]
            endif
        endfor
    endfor

    // Lakukan Binary Search
    low <- 0
    high <- length(daftarDokter) - 1
    found <- false
    mid <- 0

    while low <= high
        mid <- (low + high) / 2

        if daftarDokter[mid].id = id then
            found <- true
            break
        else if daftarDokter[mid].id < id then
            low <- mid + 1
        else
            high <- mid - 1
        endif
    endwhile

    if found then
        d <- daftarDokter[mid]
        output("\nData Dokter Ditemukan (Binary Search):")
        output("=============================================================")
        output("ID    Nama                Spesialisasi    Gender     Jadwal")
        output("=============================================================")
        output(d.id, d.nama, d.spesialisasi, d.gender, d.jadwal)
    else
        output("Dokter dengan ID ", id, " tidak ditemukan.")
    endif

---

fungsi menuRiwayat()
kamus
    pilihan_riwayat : integer
algoritma
    loop
        output("\n=== MENU RIWAYAT ===")
        output("1. Tampilkan Semua Riwayat")
        output("2. Tambah Riwayat Baru")
        output("3. Edit Data Riwayat")
        output("4. Hapus Data Riwayat")
        output("5. Kembali ke Menu Utama")
        output("Pilih menu (1-5): ")
        input(pilihan_riwayat)

        switch pilihan_riwayat
            case 1:
                tampilkanRiwayat()
            case 2:
                tambahRiwayat()
            case 3:
                editRiwayat()
            case 4:
                hapusRiwayat()
            case 5:
                return
            default:
                output("Pilihan tidak valid! Silakan pilih 1-5.")
        endswitch
    endloop

fungsi tampilkanRiwayat()
algoritma
    output("\nDaftar Riwayat:")
    output("====================================================================")
    output("ID    Pasien ID Dokter ID Tanggal       Diagnosa")
    output("====================================================================")
    for each riwayat in daftarRiwayat
        output(riwayat.id, riwayat.pasienID, riwayat.dokterID, riwayat.tanggal, riwayat.diagnosa)
    endfor

fungsi tambahRiwayat()
kamus
    riwayat_baru : Riwayat
algoritma
    output("\nTambah Riwayat Baru")
    output("ID Riwayat: ")
    input(riwayat_baru.id)
    output("ID Pasien: ")
    input(riwayat_baru.pasienID)
    output("ID Dokter: ")
    input(riwayat_baru.dokterID)
    output("Tanggal (YYYY-MM-DD): ")
    input(riwayat_baru.tanggal)
    output("Diagnosa: ")
    input(riwayat_baru.diagnosa)

    append riwayat_baru to daftarRiwayat
    output("Riwayat berhasil ditambahkan!")

fungsi editRiwayat()
kamus
    id_edit : string
    ditemukan : boolean
algoritma
    output("Masukkan ID Riwayat yang akan diedit: ")
    input(id_edit)

    ditemukan <- false
    for i from 0 to length(daftarRiwayat) - 1
        if daftarRiwayat[i].id = id_edit then
            output("\nData Riwayat Ditemukan:")
            output("ID    Pasien ID Dokter ID Tanggal       Diagnosa")
            output(daftarRiwayat[i].id, daftarRiwayat[i].pasienID, daftarRiwayat[i].dokterID, daftarRiwayat[i].tanggal, daftarRiwayat[i].diagnosa)

            output("\nMasukkan data baru:")
            output("ID Pasien: ")
            input(daftarRiwayat[i].pasienID)
            output("ID Dokter: ")
            input(daftarRiwayat[i].dokterID)
            output("Tanggal (YYYY-MM-DD): ")
            input(daftarRiwayat[i].tanggal)
            output("Diagnosa: ")
            input(daftarRiwayat[i].diagnosa)

            output("Data riwayat berhasil diperbarui!")
            ditemukan <- true
            break
        endif
    endfor
    if not ditemukan then
        output("Riwayat dengan ID ", id_edit, " tidak ditemukan.")
    endif

fungsi hapusRiwayat()
kamus
    id_hapus : string
    idx_riwayat : integer
    ditemukan : boolean
algoritma
    output("Masukkan ID Riwayat yang akan dihapus: ")
    input(id_hapus)

    idx_riwayat <- -1
    for i from 0 to length(daftarRiwayat) - 1
        if daftarRiwayat[i].id = id_hapus then
            idx_riwayat <- i
            ditemukan <- true
            break
        endif
    endfor

    if ditemukan then
        remove daftarRiwayat[idx_riwayat]
        output("Riwayat berhasil dihapus!")
    else
        output("Riwayat dengan ID ", id_hapus, " tidak ditemukan.")
    endif
