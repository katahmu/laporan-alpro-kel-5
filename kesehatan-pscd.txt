program SistemManajemenRumahSakit
kamus
    type Pasien : <
        id : string,
        nama : string,
        umur : integer,
        gender : string
    >
    
    type Dokter : <
        id : string,
        nama : string,
        spesialisasi : string,
        gender : string,
        jadwal : string
    >
    
    type Riwayat : <
        id : string,
        idPasien : string,
        idDokter : string,
        tanggal : string,
        diagnosa : string
    >
    
    pasien : array [1..100] of Pasien
    dokter : array [1..50] of Dokter
    riwayat : array [1..200] of Riwayat
    nPasien, nDokter, nRiwayat : integer
    pilihan, subPilihan : integer
    idCari : string
algoritma
    // Inisialisasi data contoh
    pasien[1] ← <"P001", "Assyifa Dwi Safitri", 35, "P">
    pasien[2] ← <"P002", "Amirah Essary Yunsarah Sujuthi", 28, "P">
    pasien[3] ← <"P003", "Keisha Hananta", 45, "P">
    pasien[4] ← <"P004", "Dit Adit", 20, "L">
    nPasien ← 4
    
    dokter[1] ← <"D001", "Dr. Ahmad", "Kardiologi", "L", "Senin-Jumat, 08.00-12.00">
    dokter[2] ← <"D002", "Dr. Budi", "Kedokteran Umum", "L", "Senin-Jumat, 13.00-17.00">
    dokter[3] ← <"D003", "Dr. Candra", "Kedokteran Gigi", "L", "Senin-Jumat, 08.00-12.00">
    dokter[4] ← <"D004", "Dr. Dwi", "Kedokteran Gigi", "P", "Senin-Jumat, 13.00-17.00">
    dokter[5] ← <"D005", "Dr. Eka", "Kedokteran Mata", "P", "Senin-Jumat, 08.00-12.00">
    nDokter ← 5
    
    riwayat[1] ← <"R001", "P001", "D001", "2023-07-01", "Cephalgia">
    riwayat[2] ← <"R002", "P002", "D002", "2023-07-02", "Nausea">
    riwayat[3] ← <"R003", "P003", "D003", "2023-07-03", "Odontalgia">
    riwayat[4] ← <"R004", "P004", "D004", "2023-07-04", "Karies Gigi">
    riwayat[5] ← <"R005", "P005", "D005", "2023-07-05", "Miopia">
    nRiwayat ← 5
    
    // Menu utama
    repeat
        output("\n=== SISTEM INFORMASI RUMAH SAKIT ===")
        output("1. Kelola Data Pasien")
        output("2. Kelola Data Dokter")
        output("3. Kelola Data Riwayat")
        output("4. Keluar")
        input(pilihan)
        
        case pilihan of
            1 : // Menu Pasien
                repeat
                    output("\n=== MENU PASIEN ===")
                    output("1. Tampilkan Semua Pasien")
                    output("2. Tambah Pasien Baru")
                    output("3. Edit Data Pasien")
                    output("4. Hapus Data Pasien")
                    output("5. Urutkan Pasien Berdasarkan Umur")
                    output("6. Urutkan Pasien Berdasarkan Nama")
                    output("7. Cari Pasien Berdasarkan ID")
                    output("8. Kembali ke Menu Utama")
                    input(subPilihan)
                    
                    case subPilihan of
                        1 : tampilkanPasien(pasien, nPasien)
                        2 : pasien[nPasien+1] ← inputPasien()
                            nPasien ← nPasien + 1
                        3 : editPasien(pasien, nPasien)
                        4 : hapusPasien(pasien, nPasien, riwayat, nRiwayat)
                        5 : pasien ← urutkanPasienByUmur(pasien, nPasien)
                            tampilkanPasien(pasien, nPasien)
                        6 : pasien ← urutkanPasienByNama(pasien, nPasien)
                            tampilkanPasien(pasien, nPasien)
                        7 : input(idCari)
                            cariPasienById(pasien, nPasien, idCari)
                        8 : // Kembali ke menu utama
                        else : output("Pilihan tidak valid!")
                    endcase
                until subPilihan = 8
                
            2 : // Menu Dokter
                repeat
                    output("\n=== MENU DOKTER ===")
                    output("1. Tampilkan Semua Dokter")
                    output("2. Tambah Dokter Baru")
                    output("3. Edit Data Dokter")
                    output("4. Hapus Data Dokter")
                    output("5. Urutkan Dokter Berdasarkan Nama")
                    output("6. Kembali ke Menu Utama")
                    input(subPilihan)
                    
                    case subPilihan of
                        1 : tampilkanDokter(dokter, nDokter)
                        2 : dokter[nDokter+1] ← inputDokter()
                            nDokter ← nDokter + 1
                        3 : editDokter(dokter, nDokter)
                        4 : hapusDokter(dokter, nDokter, riwayat, nRiwayat)
                        5 : dokter ← urutkanDokterByNama(dokter, nDokter)
                            tampilkanDokter(dokter, nDokter)
                        6 : // Kembali ke menu utama
                        else : output("Pilihan tidak valid!")
                    endcase
                until subPilihan = 6
                
            3 : // Menu Riwayat
                repeat
                    output("\n=== MENU RIWAYAT ===")
                    output("1. Tampilkan Semua Riwayat")
                    output("2. Tambah Riwayat Baru")
                    output("3. Edit Data Riwayat")
                    output("4. Hapus Data Riwayat")
                    output("5. Kembali ke Menu Utama")
                    input(subPilihan)
                    
                    case subPilihan of
                        1 : tampilkanRiwayat(riwayat, nRiwayat)
                        2 : riwayat[nRiwayat+1] ← inputRiwayat()
                            nRiwayat ← nRiwayat + 1
                        3 : editRiwayat(riwayat, nRiwayat)
                        4 : hapusRiwayat(riwayat, nRiwayat)
                        5 : // Kembali ke menu utama
                        else : output("Pilihan tidak valid!")
                    endcase
                until subPilihan = 5
                
            4 : output("Terima kasih telah menggunakan sistem ini.")
            else : output("Pilihan tidak valid!")
        endcase
    until pilihan = 4
endprogram

// Fungsi untuk input data
function inputPasien() → Pasien
kamus
    p : Pasien
algoritma
    output("\nTambah Pasien Baru")
    output("ID Pasien: ")
    input(p.id)
    output("Nama Pasien: ")
    input(p.nama)
    output("Umur Pasien: ")
    input(p.umur)
    output("Gender (L/P): ")
    input(p.gender)
    output("Pasien berhasil ditambahkan!")
    return p
endfunction

function inputDokter() → Dokter
kamus
    d : Dokter
algoritma
    output("\nTambah Dokter Baru")
    output("ID Dokter: ")
    input(d.id)
    output("Nama Dokter: ")
    input(d.nama)
    output("Spesialisasi: ")
    input(d.spesialisasi)
    output("Gender (L/P): ")
    input(d.gender)
    output("Jadwal Praktek: ")
    input(d.jadwal)
    output("Dokter berhasil ditambahkan!")
    return d
endfunction

function inputRiwayat() → Riwayat
kamus
    r : Riwayat
algoritma
    output("\nTambah Riwayat Baru")
    output("ID Riwayat: ")
    input(r.id)
    output("ID Pasien: ")
    input(r.idPasien)
    output("ID Dokter: ")
    input(r.idDokter)
    output("Tanggal (YYYY-MM-DD): ")
    input(r.tanggal)
    output("Diagnosa: ")
    input(r.diagnosa)
    output("Riwayat berhasil ditambahkan!")
    return r
endfunction

// Fungsi untuk menampilkan data
function tampilkanPasien(pasien : array [1..100] of Pasien, n : integer)
kamus
    i : integer
algoritma
    output("\nDaftar Pasien:")
    output("==========================================")
    output("ID    Nama                     Umur Gender")
    output("==========================================")
    for i ← 1 to n do
        output(pasien[i].id, " ", pasien[i].nama, " ", pasien[i].umur, " ", pasien[i].gender)
    endfor
endfunction

function tampilkanDokter(dokter : array [1..50] of Dokter, n : integer)
kamus
    i : integer
algoritma
    output("\nDaftar Dokter:")
    output("=============================================================")
    output("ID    Nama               Spesialisasi  Gender Jadwal")
    output("=============================================================")
    for i ← 1 to n do
        output(dokter[i].id, " ", dokter[i].nama, " ", dokter[i].spesialisasi, " ", dokter[i].gender, " ", dokter[i].jadwal)
    endfor
endfunction

function tampilkanRiwayat(riwayat : array [1..200] of Riwayat, n : integer)
kamus
    i : integer
algoritma
    output("\nDaftar Riwayat:")
    output("====================================================================")
    output("ID    Pasien ID Dokter ID Tanggal     Diagnosa")
    output("====================================================================")
    for i ← 1 to n do
        output(riwayat[i].id, " ", riwayat[i].idPasien, " ", riwayat[i].idDokter, " ", riwayat[i].tanggal, " ", riwayat[i].diagnosa)
    endfor
endfunction

// Fungsi untuk pengurutan
function urutkanPasienByUmur(pasien : array [1..100] of Pasien, n : integer) → array [1..100] of Pasien
kamus
    i, j, minIndex : integer
    temp : Pasien
algoritma
    for i ← 1 to n-1 do
        minIndex ← i
        for j ← i+1 to n do
            if pasien[j].umur < pasien[minIndex].umur then
                minIndex ← j
            endif
        endfor
        if minIndex ≠ i then
            temp ← pasien[i]
            pasien[i] ← pasien[minIndex]
            pasien[minIndex] ← temp
        endif
    endfor
    return pasien
endfunction

function urutkanPasienByNama(pasien : array [1..100] of Pasien, n : integer) → array [1..100] of Pasien
kamus
    i, j : integer
    key : Pasien
algoritma
    for i ← 2 to n do
        key ← pasien[i]
        j ← i - 1
        while j ≥ 1 and pasien[j].nama > key.nama do
            pasien[j+1] ← pasien[j]
            j ← j - 1
        endwhile
        pasien[j+1] ← key
    endfor
    return pasien
endfunction

function urutkanDokterByNama(dokter : array [1..50] of Dokter, n : integer) → array [1..50] of Dokter
kamus
    i, j, minIndex : integer
    temp : Dokter
algoritma
    for i ← 1 to n-1 do
        minIndex ← i
        for j ← i+1 to n do
            if dokter[j].nama < dokter[minIndex].nama then
                minIndex ← j
            endif
        endfor
        if minIndex ≠ i then
            temp ← dokter[i]
            dokter[i] ← dokter[minIndex]
            dokter[minIndex] ← temp
        endif
    endfor
    return dokter
endfunction

// Fungsi untuk pencarian
function cariPasienById(pasien : array [1..100] of Pasien, n : integer, id : string)
kamus
    i : integer
    found : boolean
algoritma
    found ← false
    for i ← 1 to n do
        if pasien[i].id = id then
            output("\nData Pasien Ditemukan:")
            output("==========================================")
            output("ID    Nama                     Umur Gender")
            output("==========================================")
            output(pasien[i].id, " ", pasien[i].nama, " ", pasien[i].umur, " ", pasien[i].gender)
            found ← true
            exit
        endif
    endfor
    if not found then
        output("Pasien dengan ID ", id, " tidak ditemukan.")
    endif
endfunction

// Fungsi untuk edit data
function editPasien(in/out pasien : array [1..100] of Pasien, n : integer)
kamus
    i : integer
    id : string
algoritma
    output("Masukkan ID Pasien yang akan diedit: ")
    input(id)
    
    for i ← 1 to n do
        if pasien[i].id = id then
            output("\nData Pasien Ditemukan:")
            output("ID    Nama                     Umur Gender")
            output(pasien[i].id, " ", pasien[i].nama, " ", pasien[i].umur, " ", pasien[i].gender)
            
            output("\nMasukkan data baru:")
            output("Nama Pasien: ")
            input(pasien[i].nama)
            output("Umur Pasien: ")
            input(pasien[i].umur)
            output("Gender (L/P): ")
            input(pasien[i].gender)
            
            output("Data pasien berhasil diperbarui!")
            return
        endif
    endfor
    output("Pasien dengan ID ", id, " tidak ditemukan.")
endfunction

function editDokter(in/out dokter : array [1..50] of Dokter, n : integer)
kamus
    i : integer
    id : string
algoritma
    output("Masukkan ID Dokter yang akan diedit: ")
    input(id)
    
    for i ← 1 to n do
        if dokter[i].id = id then
            output("\nData Dokter Ditemukan:")
            output("ID    Nama               Spesialisasi  Gender Jadwal")
            output(dokter[i].id, " ", dokter[i].nama, " ", dokter[i].spesialisasi, " ", dokter[i].gender, " ", dokter[i].jadwal)
            
            output("\nMasukkan data baru:")
            output("Nama Dokter: ")
            input(dokter[i].nama)
            output("Spesialisasi: ")
            input(dokter[i].spesialisasi)
            output("Gender (L/P): ")
            input(dokter[i].gender)
            output("Jadwal Praktek: ")
            input(dokter[i].jadwal)
            
            output("Data dokter berhasil diperbarui!")
            return
        endif
    endfor
    output("Dokter dengan ID ", id, " tidak ditemukan.")
endfunction

function editRiwayat(in/out riwayat : array [1..200] of Riwayat, n : integer)
kamus
    i : integer
    id : string
algoritma
    output("Masukkan ID Riwayat yang akan diedit: ")
    input(id)
    
    for i ← 1 to n do
        if riwayat[i].id = id then
            output("\nData Riwayat Ditemukan:")
            output("ID    Pasien ID Dokter ID Tanggal     Diagnosa")
            output(riwayat[i].id, " ", riwayat[i].idPasien, " ", riwayat[i].idDokter, " ", riwayat[i].tanggal, " ", riwayat[i].diagnosa)
            
            output("\nMasukkan data baru:")
            output("ID Pasien: ")
            input(riwayat[i].idPasien)
            output("ID Dokter: ")
            input(riwayat[i].idDokter)
            output("Tanggal (YYYY-MM-DD): ")
            input(riwayat[i].tanggal)
            output("Diagnosa: ")
            input(riwayat[i].diagnosa)
            
            output("Data riwayat berhasil diperbarui!")
            return
        endif
    endfor
    output("Riwayat dengan ID ", id, " tidak ditemukan.")
endfunction

// Fungsi untuk menghapus data
function hapusPasien(in/out pasien : array [1..100] of Pasien, in/out nPasien : integer, 
                     in/out riwayat : array [1..200] of Riwayat, in/out nRiwayat : integer)
kamus
    i, j : integer
    id : string
algoritma
    output("Masukkan ID Pasien yang akan dihapus: ")
    input(id)
    
    for i ← 1 to nPasien do
        if pasien[i].id = id then
            // Hapus riwayat yang terkait
            j ← 1
            while j ≤ nRiwayat do
                if riwayat[j].idPasien = id then
                    // Geser semua elemen setelah index j ke kiri
                    for k ← j to nRiwayat-1 do
                        riwayat[k] ← riwayat[k+1]
                    endfor
                    nRiwayat ← nRiwayat - 1
                    j ← j - 1 // Periksa lagi index yang sama
                endif
                j ← j + 1
            endwhile
            
            // Hapus pasien
            for k ← i to nPasien-1 do
                pasien[k] ← pasien[k+1]
            endfor
            nPasien ← nPasien - 1
            
            output("Pasien dan riwayat terkait berhasil dihapus!")
            return
        endif
    endfor
    output("Pasien dengan ID ", id, " tidak ditemukan.")
endfunction

function hapusDokter(in/out dokter : array [1..50] of Dokter, in/out nDokter : integer, 
                     in/out riwayat : array [1..200] of Riwayat, in/out nRiwayat : integer)
kamus
    i, j : integer
    id : string
algoritma
    output("Masukkan ID Dokter yang akan dihapus: ")
    input(id)
    
    for i ← 1 to nDokter do
        if dokter[i].id = id then
            // Hapus riwayat yang terkait
            j ← 1
            while j ≤ nRiwayat do
                if riwayat[j].idDokter = id then
                    // Geser semua elemen setelah index j ke kiri
                    for k ← j to nRiwayat-1 do
                        riwayat[k] ← riwayat[k+1]
                    endfor
                    nRiwayat ← nRiwayat - 1
                    j ← j - 1 // Periksa lagi index yang sama
                endif
                j ← j + 1
            endwhile
            
            // Hapus dokter
            for k ← i to nDokter-1 do
                dokter[k] ← dokter[k+1]
            endfor
            nDokter ← nDokter - 1
            
            output("Dokter dan riwayat terkait berhasil dihapus!")
            return
        endif
    endfor
    output("Dokter dengan ID ", id, " tidak ditemukan.")
endfunction

function hapusRiwayat(in/out riwayat : array [1..200] of Riwayat, in/out nRiwayat : integer)
kamus
    i, j : integer
    id : string
algoritma
    output("Masukkan ID Riwayat yang akan dihapus: ")
    input(id)
    
    for i ← 1 to nRiwayat do
        if riwayat[i].id = id then
            // Geser semua elemen setelah index i ke kiri
            for j ← i to nRiwayat-1 do
                riwayat[j] ← riwayat[j+1]
            endfor
            nRiwayat ← nRiwayat - 1
            output("Riwayat berhasil dihapus!")
            return
        endif
    endfor
    output("Riwayat dengan ID ", id, " tidak ditemukan.")
endfunction
